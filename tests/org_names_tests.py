# coding: utf-8

import unittest
from people_names import people_names

class OrgTests(unittest.TestCase):
    def test_split_name_fml(self):
        names = people_names.split_name('Federico F. Peña', 'fml')
        self.assertEqual(names['first_name'], 'Federico')
        self.assertEqual(names['middle_name'], 'F')
        self.assertEqual(names['last_name'], 'Pena')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'federico-f-pena')

        names = people_names.split_name('David A. Arledge (Président du conseil)', 'fml')
        self.assertEqual(names['first_name'], 'David')
        self.assertEqual(names['middle_name'], 'A')
        self.assertEqual(names['last_name'], 'Arledge')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'david-a-arledge')


        names = people_names.split_name('Arthur D. Collins, Jr.*', 'fml')
        self.assertEqual(names['first_name'], 'Arthur')
        self.assertEqual(names['middle_name'], 'D')
        self.assertEqual(names['last_name'], 'Collins')
        self.assertEqual(names['suffix_name'], 'Jr')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'arthur-d-collins')

        names = people_names.split_name('Mona Jasinski, M.B.A., ICD.D., C.H.R.P.', 'fml')
        self.assertEqual(names['first_name'], 'Mona')
        self.assertEqual(names['middle_name'], '')
        self.assertEqual(names['last_name'], 'Jasinski')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], 'MBA')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'mona-jasinski')

        names = people_names.split_name('Claudio Ghersinich, P. Eng.', 'fml')
        self.assertEqual(names['first_name'], 'Claudio')
        self.assertEqual(names['middle_name'], '')
        self.assertEqual(names['last_name'], 'Ghersinich')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], 'PEng')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'claudio-ghersinich')

        names = people_names.split_name('Anthony Marino, P.Eng.', 'fml')
        self.assertEqual(names['first_name'], 'Anthony')
        self.assertEqual(names['middle_name'], '')
        self.assertEqual(names['last_name'], 'Marino')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], 'PEng')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'anthony-marino')

        names = people_names.split_name('Terry Hergott, CPA, CMA', 'fml')
        self.assertEqual(names['first_name'], 'Terry')
        self.assertEqual(names['middle_name'], '')
        self.assertEqual(names['last_name'], 'Hergott')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], 'CPA')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'terry-hergott')

        names = people_names.split_name('Gary D. Cohn President and Chief Operating Officer', 'fml')
        self.assertEqual(names['first_name'], 'Gary')
        self.assertEqual(names['middle_name'], 'D')
        self.assertEqual(names['last_name'], 'Cohn')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'gary-d-cohn')

        names = people_names.split_name('Gary D. Cohn President and COO', 'fml')
        self.assertEqual(names['first_name'], 'Gary')
        self.assertEqual(names['middle_name'], 'D')
        self.assertEqual(names['last_name'], 'Cohn')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'gary-d-cohn')

        names = people_names.split_name('Adebayo O. Ogunlesi Lead Director', 'fml')
        self.assertEqual(names['first_name'], 'Adebayo')
        self.assertEqual(names['middle_name'], 'O')
        self.assertEqual(names['last_name'], 'Ogunlesi')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'adebayo-o-ogunlesi')

        names = people_names.split_name('Lloyd C. Blankfein Chairman and Chief Executive Officer', 'fml')
        self.assertEqual(names['first_name'], 'Lloyd')
        self.assertEqual(names['middle_name'], 'C')
        self.assertEqual(names['last_name'], 'Blankfein')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'lloyd-c-blankfein')

        names = people_names.split_name('Michael Sherwood Vice Chairman', 'fml')
        self.assertEqual(names['first_name'], 'Michael')
        self.assertEqual(names['middle_name'], '')
        self.assertEqual(names['last_name'], 'Sherwood')
        self.assertEqual(names['suffix_name'], '')
        self.assertEqual(names['nominal_name'], '')
        self.assertEqual(names['nickname'], '')
        self.assertEqual(names['slug_name'], 'michael-sherwood')

# python -m unittest discover -s tests -p "*_tests.py"
